---
format: 
  pdf:
    fig-pos: "H"
    tbl-cap-location: bottom
lang: es
echo: FALSE
message: FALSE
warning: FALSE
geometry:
  - top= 25mm
  - left= 20mm
  - right = 20mm
  - bottom = 25mm
  - heightrounded
header-includes:
  - \usepackage{ragged2e}
  - \usepackage{hyperref}
  - \usepackage{float}
  - \floatplacement{table}{H}
---


```{r Carga de librerias y funciones}
library(tidyverse)
library(patchwork)
library(tinytable)
library(rstan)
library(tidybayes) # No se que hace
library(bayesplot)
```

```{r Configuraciones predeterminadas}
knitr::opts_chunk$set(fig.align = "center", out.width = "70%")

set.seed("2126519")

theme_set(theme_bw())
```

::: {.center data-latex=""}

\vspace{3cm}

```{r logo facultad, echo=F, include = T, out.width= "60%"}
# knitr::include_graphics("logounr.png")
```

\pagenumbering{gobble}

\vspace{5cm}

\Large
**LICENCIATURA EN ESTADÍSTICA**

\vspace{1cm}

\Large
**METRÓPOLIS-HASTINGS**


\vspace{0.3cm}
\large

*"Markov chain Monte Carlo (MCMC) method"*

\vspace{9cm}

\large

**Autores: Franco Santini - Nicolas Gamboa - Andrés Roncaglia**

**Docentes: Ignacio Evangelista - Tomás Capretto**

**2024**
\normalsize
\newpage
\hypersetup{linkcolor = black}
\tableofcontents


\newpage
\pagenumbering{arabic}

:::

\newpage


# Introducción


$$T(t) = T_{\text{amb}} + (T_i - T_{\text{amb}})e^{-rt} \Rightarrow \\ \Rightarrow \frac{d T(t)}{d t} = -r(T_i - T_{\text{amb}}) \cdot e^{-rt} $$

$$r(T_{\text{amb}} - T_{\text{amb}})\cdot e^{-rt} - r(T_i - T_{\text{amb}}) \cdot e^{-rt} = \\ = r \{T_{\text{amb}} - T_{\text{amb}} - (T_i - T_{\text{amb}})e^{-rt} \} = r \{T_{\text{amb}} - \underbrace{[T_{\text{amb}} + (T_i - T_{\text{amb}})e^{-rt}]}_{T(t)} \} = r [T_{\text{amb}} - T(t)]$$

```{r}
function_T <- function(t, t_amb, t_ini, r) {
 
  # t: Tiempo en horas
  # t_amb: Temperatura ambiente
  # t_ini: Temperatura inicial del cuerpo
  # r: Constante
   
  if (any(t < 0)) {stop("El tiempo no puede ser negativo")}
  
  t_amb + (t_ini - t_amb)*exp(-r*t)
  
}

r1 <- function_T(t = seq(0,60, length.out = 1000),
           t_amb = 23,
           t_ini = 37,
           r = 0.1)

r2 <- function_T(t = seq(0,60, length.out = 1000),
           t_amb = 23,
           t_ini = 37,
           r = 0.3)


data.frame(t = rep(seq(0,60, length.out = 1000), times = 2),
           obs = c(r1,r2),
           valor_r = rep(c("r = 0.1", "r = 0.3"), each = 1000)) |> 
  ggplot() + 
  geom_line(aes(x = t, y = obs, color = valor_r)) +
  scale_y_continuous(breaks = seq(23,37,by=2), limits = c(23,37)) +
  labs(x = "Tiempo (horas)")



```


r representa el peso que tiene la temperatura en la perdida de temperatura del cuerpo es mayor. r puede ser la tasa de enfriamiento

r es un coeficiente de perdida de temperatura corporal (nicolas gamboa)

Según lo publicado por la (La Gaceta Internacional de Ciencias Forenses)[https://www.uv.es/gicf/3R1_Pen%CC%83a_GICF_31.pdf] la tasa de enfriamiento del cuerpo varía en tres estapas, las primeras 3 o 4 horas donde la temperatura baja menos de medio grado por hora, las siguientes 6 a 10 horas donde la temperatura baja alrededor de 1 grado por hora, y a partir de las 10 horas el cuerpo desciende su temperatura entre 3/4 a 1/4 grados por hora, hasta alcanzar la temperatura ambiente. Teniendo en cuenta que r se supone constante, se puede asumir que un buen valor de r es mayor que 0,05 y menor que 0,5.



$T(t) - T_{\text{amb}} = T_{\text{diff}} e^{-rt} \Rightarrow \\ ln(T(t) - T_{\text{amb}}) = ln(T_{\text{diff}} e^{-rt}) = \underbrace{ln(T_{\text{diff}})}_{\beta_0} + \underbrace{(-r)}_{\beta_1}t = \beta_0 + \beta_1 \cdot t$

Donde $\beta_0$ representa el logaritmo natural de la diferencia entre la temperatura inicial del cuerpo y la temperatura ambiente y $\beta_1$ es el cambio esperado en la diferencia de temperaturas del logaritmo por cada hora.

Según los (registros meteorológicos de Salsipuedes, Córdoba)[https://es.weatherspark.com/y/28135/Clima-promedio-en-Salsipuedes-Argentina-durante-todo-el-a%C3%B1o], la temperatura ambiental no suele bajar de los -2 ºC ni superar los 33 ºC, mientras que la temperatura máxima a la que puede llegar un cuerpo es 41 ºC en el caso que la persona sufra hiperpirexia^[Hiperpirexia: Temperatura corporal superior a 40 ºC en presencia de disfunción del sistema nervioso central] y la mínima 34 ºC en casos de hiportermia. 

Con esto en mente, se plantean las siguientes distribuciónes a priori para los parámetros:

- Diferencia de temperatura máxima: $max(T_{diff}) = max(T_i) - min(T_{\text{amb}}) = 41º - (-2º) = 43º$

- Diferencia de temperatura mínima: $min(T_{diff}) = min(T_i) - max(T_{\text{amb}}) = 34º - 33º = 1º$

- Diferencia de temperatura máxima: $max(T_{diff}) = max(T_i) - T_{\text{amb}} = 41º - 22º = 19º$

- Diferencia de temperatura mínima: $min(T_{diff}) = min(T_i) - T_{\text{amb}} = 23º - 22° = 1º$

- Logaritmo de la diferencia de temperatura promedio: $\frac{ln(max(T_{diff}) + min(T_{diff}))}{2} = 1.4722$

- Logaritmo de la diferencia de temperatura promedio: $\frac{ln(max(T_{diff})) + ln(min(T_{diff}))}{2} = -0.8304$

$$\beta_0 \sim Normal(\mu_0 = 1.8806, \sigma_0 = 0.6269)$$

$$\beta_1 \sim Normal(\mu_1 = 0, \sigma_1 = 0.17)$$

Rango del logaritmo de la diferencia de temperatura = $ln(41º-22º) - ln(23.7º - 22º)$

Desvío máximo del logaritmo de la diferencia de temperatura = $\frac{ln(41º-22º) - ln(23.7º - 22º)}{3} = 0.8046$

$$\sigma \sim Normal^+(0.8046)$$

Los parámetros, a priori, son independientes y siguen una distribución normal.


```{r}
n <- 40000
largo_grilla <- 100

grilla_t <- seq(-15,11,length.out = largo_grilla)

pred_prior <- data.frame(
  prior_beta_0 = rnorm(n, 1.4722, 0.5),
  prior_beta_1 = rnorm(n, 0, 0.17),
  prior_sigma = rnorm(n,0,0.8046)
  ) 


calc_diff_prom <- function(t, data) {
  return((data$prior_beta_0 + data$prior_beta_1 * t))
}


diff_prom <- sapply(grilla_t, calc_diff_prom, pred_prior) |> `colnames<-`(round(grilla_t,1))

graf <- as.data.frame(diff_prom[sample(nrow(diff_prom),size = 5000),])


# Grafico con intervalo de credibilidad ------------


mu_mean <- apply(graf, 2, mean)

mu_qts <- t(apply(graf, 2, function(x) quantile(x, c(0.025, 0.975))))

mu_qts2 <- t(apply(graf, 2, function(x) quantile(x, c(0.25, 0.75))))


data_mu <- data.frame(
  t = grilla_t, 
  y = mu_mean,
  lower_95 = mu_qts[, 1],
  upper_95 = mu_qts[, 2],
  lower_50 = mu_qts2[, 1],
  upper_50 = mu_qts2[, 2]
)


ggplot(data_mu) +
  geom_ribbon(
    aes(t, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6
  ) +
  geom_ribbon(
    aes(t, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6
  ) +
  geom_line(
    aes(t, y), 
    color = "firebrick"
  )

```



¿Qué son pruebas predictivas a priori?


$$
Y/\mu_i \ ,\ \sigma\sim N(\mu_i,\sigma^2)\\
\mu_i = \beta_0+\beta_1t_i \\

\beta_0 \sim N(1.8806, 0.6269^2) \\
\beta_1 \sim N(0, 0.17^2)\\
\sigma \sim N^+(0, 0.8046^2)


$$



```{r prediccion 7am}
datos <- data.frame(
  diff = c(10.8, 8.5, 1.7),
  t = c(0, 1.5, 6.75)
)


stan_data <- list(
    N = nrow(datos[1,]), 
    t = as.array(datos[1,]$t),     
    y = as.array(log(datos[1,]$diff))      
)

load("Stan_models/Modelos_ejecutados")

mcmc_dens_overlay(stan_model)

df_posterior <- as.data.frame(extract(stan_model))
```


```{r, eval=FALSE}
stan_model <- stan(
    file = "Stan_models/Model_1.stan",
    chains = 4,
    data = stan_data,
    iter = 10000,
    refresh = 0,
    seed = 121195
)
```


```{r prediccion 7am 2}
intercepto_promedio <- mean(df_posterior$beta0)
pendiente_promedio <- mean(df_posterior$beta1)

t_dist <- (log(15) - df_posterior$beta0)/df_posterior$beta1

g1 <- ggplot() + 
  geom_density(aes(x = t_dist)) +
  scale_x_continuous(limits = c(-24,24))

g2 <- ggplot() + 
  geom_density(aes(x = t_dist_negativo)) +
  scale_x_continuous(limits = c(-24,1), breaks = seq(-24,0,6))

mean(t_dist >= -6 & t_dist <= 0) # Con valores + y -

t_dist_negativo <- t_dist[t_dist < 0]

mean(t_dist_negativo >= -6 & t_dist_negativo <= 0) 

# Haz de rectas

calc_diff_prom_posterior <- function(t, data) {
  return((data$beta0 + data$beta1 * t))
}

diff_prom_2 <- sapply(grilla_t, calc_diff_prom_posterior, df_posterior) |> `colnames<-`(round(grilla_t,1))

graf_2 <- as.data.frame(diff_prom_2[sample(nrow(diff_prom_2),size = 5000),])


graf_long_2 <- pivot_longer(graf_2, cols = 1:100, names_to = "tiempo",values_to = "diff") |> 
  mutate(rep = factor(rep(1:5000, each = 100)))

graf_long_2 |> 
  mutate(tiempo = as.numeric(tiempo)) |> 
  ggplot() + 
  geom_line(aes(x = tiempo, y = (diff), group = rep), alpha = 0.2)



# Grafico con intervalo de credibilidad ------------


mu_mean <- apply(graf_2, 2, mean)

mu_qts <- t(apply(graf_2, 2, function(x) quantile(x, c(0.025, 0.975))))

mu_qts2 <- t(apply(graf_2, 2, function(x) quantile(x, c(0.25, 0.75))))


data_mu <- data.frame(
  t = grilla_t, 
  y = mu_mean,
  lower_95 = mu_qts[, 1],
  upper_95 = mu_qts[, 2],
  lower_50 = mu_qts2[, 1],
  upper_50 = mu_qts2[, 2]
)

ggplot(data_mu) +
  geom_ribbon(
    aes(t, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6
  ) +
  geom_ribbon(
    aes(t, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6
  ) +
  geom_line(
    aes(t, y), 
    color = "firebrick"
  )



```

$$ln(37 - 22) = \beta_0 + \beta_1 \cdot t_i \Rightarrow \frac{ln(15) - \beta_0}{\beta_1}=t_i$$
En base a la evidencia que tenemos hasta las 7am y nuestros priors definidos, podemos decir que hay un 60% de probabilidad de que el loco se haya muerto entre las 1 am y 7 am.

```{r prediccion 10am 1}
stan_data_2 <- list(
    N = nrow(datos[1:2,]), 
    t = datos[1:2,]$t,     
    y = log(datos[1:2,]$diff)      
)

mcmc_dens_overlay(stan_model_2)

df_posterior_2 <- as.data.frame(extract(stan_model_2))
```
```{r, eval=FALSE}
stan_model_2 <- stan( 
    file = "Stan_models/Model_1.stan", 
    chains = 4,         
    data = stan_data_2,
    iter = 10000,
    refresh = 0,        
    seed = 121195
)
```



```{r prediccion 10am 2}
t_dist_2 <- (log(15) - df_posterior_2$beta0)/df_posterior_2$beta1

g3 <- ggplot() + 
  geom_density(aes(x = t_dist_2)) +
  scale_x_continuous(limits = c(-24,24))

t_dist_negativo_2 <- t_dist_2[t_dist_2 < 0]

g4 <- ggplot() + 
  geom_density(aes(x = t_dist_negativo_2)) +
  scale_x_continuous(limits = c(-24,1), breaks = seq(-24,0,6))

mean(t_dist >= -6 & t_dist <= 0) # Con valores + y -


mean(t_dist_negativo_2 >= -6 & t_dist_negativo_2 <= 0) 

# Haz de rectas

diff_prom_3 <- sapply(grilla_t, calc_diff_prom_posterior, df_posterior_2) |> `colnames<-`(round(grilla_t,1))

graf_3 <- as.data.frame(diff_prom_3[sample(nrow(diff_prom_3),size = 5000),])


graf_long_3 <- pivot_longer(graf_3, cols = 1:100, names_to = "tiempo",values_to = "diff") |> 
  mutate(rep = factor(rep(1:5000, each = 100)))

graf_long_2 |> 
  mutate(tiempo = as.numeric(tiempo)) |> 
  ggplot() + 
  geom_line(aes(x = tiempo, y = (diff), group = rep), alpha = 0.2)

graf_long_3 |> 
  mutate(tiempo = as.numeric(tiempo)) |> 
  ggplot() + 
  geom_line(aes(x = tiempo, y = (diff), group = rep), alpha = 0.2)



# Grafico con intervalo de credibilidad ------------


mu_mean <- apply(graf_3, 2, mean)

mu_qts <- t(apply(graf_3, 2, function(x) quantile(x, c(0.025, 0.975))))

mu_qts2 <- t(apply(graf_3, 2, function(x) quantile(x, c(0.25, 0.75))))


data_mu <- data.frame(
  t = grilla_t, 
  y = mu_mean,
  lower_95 = mu_qts[, 1],
  upper_95 = mu_qts[, 2],
  lower_50 = mu_qts2[, 1],
  upper_50 = mu_qts2[, 2]
)

ggplot(data_mu) +
  geom_ribbon(
    aes(t, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6
  ) +
  geom_ribbon(
    aes(t, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6
  ) +
  geom_line(
    aes(t, y), 
    color = "firebrick"
  )

```

```{r prediccion todos los datos 1}
stan_data_3 <- list(
    N = nrow(datos), 
    t = datos$t,     
    y = log(datos$diff)      
)

mcmc_dens_overlay(stan_model_3)

df_posterior_3 <- as.data.frame(extract(stan_model_3))
```
```{r, eval=FALSE}
stan_model_3 <- stan( 
    file = "Stan_models/Model_1.stan", 
    chains = 4,         
    data = stan_data_3,
    iter = 10000,
    refresh = 0,        
    seed = 121195
)

```



```{r prediccion todos los datos 2}
t_dist_3 <- (log(15) - df_posterior_3$beta0)/df_posterior_3$beta1

g5 <- ggplot() + 
  geom_density(aes(x = t_dist_3)) +
  scale_x_continuous(limits = c(-24,24))

t_dist_negativo_3 <- t_dist_3[t_dist_3 < 0]

g6 <- ggplot() + 
  geom_density(aes(x = t_dist_negativo_3)) +
  scale_x_continuous(limits = c(-24,1), breaks = seq(-24,0,6))

mean(t_dist >= -6 & t_dist <= 0) # Con valores + y -


mean(t_dist_negativo_3 >= -6 & t_dist_negativo_3 <= 0) 

# Haz de rectas

diff_prom_4 <- sapply(grilla_t, calc_diff_prom_posterior, df_posterior_3) |> `colnames<-`(round(grilla_t,1))

graf_4 <- as.data.frame(diff_prom_4[sample(nrow(diff_prom_4),size = 5000),])


graf_long_4 <- pivot_longer(graf_4, cols = 1:100, names_to = "tiempo",values_to = "diff") |> 
  mutate(rep = factor(rep(1:5000, each = 100)))

graf_long_4 |> 
  mutate(tiempo = as.numeric(tiempo)) |> 
  ggplot() + 
  geom_line(aes(x = tiempo, y = (diff), group = rep), alpha = 0.2)




# Grafico con intervalo de credibilidad ------------


mu_mean <- apply(graf_4, 2, mean)

mu_qts <- t(apply(graf_4, 2, function(x) quantile(x, c(0.025, 0.975))))

mu_qts2 <- t(apply(graf_4, 2, function(x) quantile(x, c(0.25, 0.75))))


data_mu <- data.frame(
  t = grilla_t, 
  y = mu_mean,
  lower_95 = mu_qts[, 1],
  upper_95 = mu_qts[, 2],
  lower_50 = mu_qts2[, 1],
  upper_50 = mu_qts2[, 2]
)

ggplot(data_mu) +
  geom_ribbon(
    aes(t, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6
  ) +
  geom_ribbon(
    aes(t, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6
  ) +
  geom_line(
    aes(t, y), 
    color = "firebrick"
  )

```

